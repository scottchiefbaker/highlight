#!/usr/bin/env perl
#
# A simple filter program to decorate patterns with ANSI escape sequences.
# Released under the MIT license
#
# Author: Dave Goodell <davidjgoodell@gmail.com>
#
# With contributions from:
# - Scott Baker <scott@perturb.org>

use strict;
use warnings;
use v5.16;
use Getopt::Long;

# Disable output buffering
local $| = 1;

my $VERSION = "1.5";

my $ignore_case      = 1;
my $case_sensitive   = undef;
my $case_insensitive = undef;
my $debug            = 0;
my @raw_filters      = ();
my $force            = 0;
my $color;

GetOptions(
	"case_sensitive"   => \$case_sensitive,
	"case_insensitive" => \$case_insensitive,
	"help"             => \&print_usage_and_exit,
	"filter|f=s"       => \@raw_filters,
	"debug"            => \$debug,
	"force"            => \$force,
) or die "unable to parse options, stopped";

if ($case_sensitive) {
	$ignore_case = 0;
} elsif ($case_insensitive) {
	$ignore_case = 1;
}

my @def_colors    = (33,11,9,47,214,99,15,51,198,94); # Blue, Yellow, Red, Green, Orange, Purple, White, LightBlue, Magenta, Brown
my $def_color_num = 0;
my $reset         = color('reset');
my $bold          = color('bold');

# Respect manual color overrides in ENV
if ($ENV{"HIGHLIGHT_COLORS"}) {
	@def_colors = split(/,/,$ENV{"HIGHLIGHT_COLORS"});
}

# @colors contains raw ANSI escape sequences
my (@colors,@filters);

# These are "--filter foo --filter bar" type of options
if (@raw_filters) {
	# Build all the filter/color pairs
	foreach my $f (@raw_filters) {
		my ($filter,$color);

		# If there is a comma it's a filter/color pair
		if ($f =~ /(.+?),(.*)/) {
			$color  = $1;
			$filter = $2;
		# It's just a bare word, so it gets the default color
		} else {
			$filter = $f;

			# Get the next color in the color array
			my $index_num = $def_color_num++ % scalar(@def_colors);
			$color        = $def_colors[$index_num];
		}

		push(@colors,$color);
		push(@filters,$filter);
	}
}

# These are bareword options: highlight foo bar
foreach my $filter (@ARGV) {
	# Get the next color in the array
	my $index_num = $def_color_num++ % scalar(@def_colors);
	$color        = $def_colors[$index_num];

	push(@colors,$color);
	push(@filters,$filter);
}

if ($debug) {
	my $length = longest_word(@filters);
	$length   += 2; # We add two because we '' the filter below and it makes the string longer

	for (my $i = 0; $i < @filters; $i++) {
		my $color  = $colors[$i];
		my $filter = $filters[$i];

		my $c = $bold . color($color);
		printf("Filter: $c%${length}s$reset = '$color'\n", "'$filter'");
	}

	print "\n";
}

# Ensure we have at least ONE thing to filter on
if (!@ARGV && !@filters) {
	print_usage();
	die("At least one pattern required to match\n");
}

# Go line by line and apply each filter to it
while (my $line = <STDIN>) {

	# Loop through each filter
	for (my $i = 0; $i < @filters; $i++) {
		my $filter    = $filters[$i];
		my $color_raw = $colors[$i];
		my $color_str = $bold . color($color_raw);

		# If we're not FORCING CaseInsensitive or CaseSensitive then we do SmartCase
		if (!defined($case_sensitive) && !defined($case_insensitive)) {
			$ignore_case = int(!has_uppercase($filter));
		}

		# Search for the filter and wrap it in color
		if ($ignore_case) {
			$line =~ s/$filter/$color_str$&$reset/ig;
		} else {
			$line =~ s/$filter/$color_str$&$reset/g;
		}
	}

	print $line;
}

##########################################################################

sub print_usage {
    print <<EOT;
Usage: $0 <PATTERN0> [PATTERN1...]
  or
Usage: $0 [--filter COLOR,PATTERN] [--filter COLOR,PATTERN] ...

This is highlight version $VERSION.

This program takes text via standard input and outputs it with the given
perlre(1) pattern(s) highlighted with various colors.  If no color option
is specified, it defaults to a pre-selected array of colors. This program
is similar to "grep --color PATTERN" except both matching and non-matching
lines are printed.

Passing --case_sensitive will enable case-sensitive matching. Otherwise
Vim style smartcase matching will be implemented.

If your pattern begins with a dash ('-'), you can pass a '--' argument
after any options and before your pattern to distinguish it from an
option.

EOT
}

sub print_usage_and_exit {
	print_usage();
	exit 0;
}

sub is_numeric {
	my $f = shift();
	if ($f =~ /^(\d+\.?\d*|\.\d+)$/) { return 1; }

	return 0;
}

sub has_uppercase {
	my $str = shift();
	my $ret = 0;

	if ($str =~ /[A-Z]/) {
		$ret = 1;
	}

	return $ret;
}

sub longest_word {
	my @arr     = @_;
	my $longest = 0;

	foreach my $word (@arr) {
		my $len = length($word);

		if ($len > $longest) {
			$longest = $len;
		}
	}

	return $longest;
}

# String format: '115', '165_bold', '10_on_140', 'reset', 'on_173', 'red', 'white_on_blue'
sub color {
	my $str = shift();

	# If we're NOT connected to a an interactive terminal don't do color
	if (!$force && -t STDOUT == 0) { return ''; }

	# No string sent in, so we just reset
	if (!length($str) || $str eq 'reset') { return "\e[0m"; }

	# Some predefined colors
	my %color_map = qw(red 160 blue 27 green 34 yellow 226 orange 214 purple 93 white 15 black 0);
	$str =~ s|([A-Za-z]+)|$color_map{$1} // $1|eg;

	# Get foreground/background and any commands
	my ($fc,$cmd) = $str =~ /^(\d{1,3})?_?(\w+)?$/g;
	my ($bc)      = $str =~ /on_(\d{1,3})$/g;

	# Some predefined commands
	my %cmd_map = qw(bold 1 italic 3 underline 4 blink 5 inverse 7);
	my $cmd_num = $cmd_map{$cmd // 0};

	my $ret = '';
	if ($cmd_num)     { $ret .= "\e[${cmd_num}m"; }
	if (defined($fc)) { $ret .= "\e[38;5;${fc}m"; }
	if (defined($bc)) { $ret .= "\e[48;5;${bc}m"; }

	return $ret;
}

# vim: tabstop=4 shiftwidth=4 autoindent softtabstop=4
